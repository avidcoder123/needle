"use strict";
/**
 * @module SlimRunner
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Loader = void 0;
/*
 * japa
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
*/
/**
 * Loads files using the glob patterns.
 *
 * @class Loader
 */
class Loader {
    /**
     * Define the glob for the files
     */
    files(glob) {
        this._glob = glob;
    }
    /**
     * Define a custom filter function to filter files
     */
    filter(cb) {
        this._filterFn = cb;
    }
    /**
     * Returns an array of sorted files based on the glob
     * pattern.
     */
    async loadFiles() {
        if (!this._glob) {
            return [];
        }
        const fg = await Promise.resolve().then(() => __importStar(require('fast-glob')));
        let filesPaths = await fg.default(this._glob, {
            absolute: true,
            onlyFiles: false,
        });
        /**
         * If filterFn is defined, then filter the files
         */
        if (typeof (this._filterFn) === 'function') {
            filesPaths = filesPaths.filter((file) => this._filterFn(file));
        }
        return filesPaths.sort();
    }
}
exports.Loader = Loader;
