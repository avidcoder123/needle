/**
 * @module SlimRunner
 */
import { Test } from '../Test';
import { Group } from '../Group';
import { Assert } from '../Assert';
import { ICallback, IConfigureOptions } from '../Contracts';
/**
 * The type for the arguments to be passed to a
 * test
 */
declare type testArgs = [Assert, Function];
/**
 * The type for the arguments to be passed to a
 * hook
 */
declare type hookArgs = [Function];
/**
 * Group instance exposed by slim runner
 */
declare type runnerGroup = Pick<Group<testArgs, hookArgs>, Exclude<keyof Group<testArgs, hookArgs>, 'run' | 'toJSON' | 'test'>>;
/**
 * Create a new test
 */
export declare function test(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
/**
 * Run all the tests using the runner
 */
export declare function run(exitProcess?: boolean): Promise<void>;
export declare namespace test {
    /**
     * Create a new test to group all test together
     */
    function group(title: string, callback: (group: runnerGroup) => void): void;
    /**
     * Only run the specified test
     */
    function only(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
    /**
     * Create a test, and mark it as skipped. Skipped functions are
     * never executed. However, their hooks are executed
     */
    function skip(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
    /**
     * Create a test, and mark it as skipped only when running in CI. Skipped
     * functions are never executed. However, their hooks are executed.
     */
    function skipInCI(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
    /**
     * Create a test and run it only in the CI.
     */
    function runInCI(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
    /**
     * Create regression test
     */
    function failing(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
    /**
     * Configure test runner
     */
    function configure(options: Partial<IConfigureOptions>): void;
    /**
     * Nested only
     */
    namespace failing {
        /**
       * Only run the specified test
       */
        function only(title: string, callback: ICallback<testArgs>): Pick<Test<testArgs>, "title" | "timeout" | "retry">;
    }
}
export {};
